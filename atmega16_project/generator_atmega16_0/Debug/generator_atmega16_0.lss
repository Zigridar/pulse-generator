
generator_atmega16_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000352  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a3  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fd  00000000  00000000  00000e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a1  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000384  00000000  00000000  00001f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  8a:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uartInit>:
}

//sta
void generatorStop(void)
{
	OnOff = 0;
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	88 61       	ori	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	86 68       	ori	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <uartSendChar>:
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <uartSendChar>
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <uartReceiveChar>:
  ac:	5f 9b       	sbis	0x0b, 7	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <uartReceiveChar>
  b0:	8c b1       	in	r24, 0x0c	; 12
  b2:	08 95       	ret

000000b4 <generatorInit>:
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	89 bf       	out	0x39, r24	; 57
  ba:	78 94       	sei
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	83 bf       	out	0x33, r24	; 51
  c0:	12 be       	out	0x32, r1	; 50
  c2:	a0 9a       	sbi	0x14, 0	; 20
  c4:	a8 98       	cbi	0x15, 0	; 21
  c6:	08 95       	ret

000000c8 <pulse>:
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	96 95       	lsr	r25
  cc:	87 95       	ror	r24
  ce:	a8 9a       	sbi	0x15, 0	; 21
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	31 f0       	breq	.+12     	; 0xe0 <pulse+0x18>
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	2a 95       	dec	r18
  d8:	f1 f7       	brne	.-4      	; 0xd6 <pulse+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <pulse+0x14>
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	d1 f7       	brne	.-12     	; 0xd4 <pulse+0xc>
  e0:	a8 98       	cbi	0x15, 0	; 21
  e2:	08 95       	ret

000000e4 <__vector_9>:
}

//interrupt function
ISR(TIMER0_OVF_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	counter++;
 106:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter>
 10a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counter+0x1>
 10e:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <counter+0x2>
 112:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <counter+0x3>
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	a1 1d       	adc	r26, r1
 11a:	b1 1d       	adc	r27, r1
 11c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter>
 120:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counter+0x1>
 124:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <counter+0x2>
 128:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <counter+0x3>
	if((counter >= lowTime) && OnOff) {//125 == 80 //500 == 20Hz //50 == 200Hz //204 == 50Hz //102 == 100Hz
 12c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	84 17       	cp	r24, r20
 13a:	95 07       	cpc	r25, r21
 13c:	a6 07       	cpc	r26, r22
 13e:	b7 07       	cpc	r27, r23
 140:	98 f0       	brcs	.+38     	; 0x168 <__vector_9+0x84>
 142:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 146:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 14a:	89 2b       	or	r24, r25
 14c:	69 f0       	breq	.+26     	; 0x168 <__vector_9+0x84>
		if (OnOff)
		{
			pulse(5);
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 64 00 	call	0xc8	; 0xc8 <pulse>
			counter = 0;
 156:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter>
 15a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter+0x1>
 15e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter+0x2>
 162:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counter+0x3>
 166:	02 c0       	rjmp	.+4      	; 0x16c <__vector_9+0x88>
		}
	}
	else {
		TCNT0 = 167;
 168:	87 ea       	ldi	r24, 0xA7	; 167
 16a:	82 bf       	out	0x32, r24	; 50
	}
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <HexToInt>:

//convert hex code to int
int HexToInt(char c)
{
	int num;
	if       (c >= 48 && c <= 57 ) {   num = c - 48;        }
 18e:	90 ed       	ldi	r25, 0xD0	; 208
 190:	98 0f       	add	r25, r24
 192:	9a 30       	cpi	r25, 0x0A	; 10
 194:	28 f4       	brcc	.+10     	; 0x1a0 <HexToInt+0x12>
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	9c 01       	movw	r18, r24
 19a:	20 53       	subi	r18, 0x30	; 48
 19c:	31 09       	sbc	r19, r1
 19e:	11 c0       	rjmp	.+34     	; 0x1c2 <HexToInt+0x34>
	else  if (c >= 97 && c <= 102) {   num = c - 97 + 10;   }
 1a0:	9f e9       	ldi	r25, 0x9F	; 159
 1a2:	98 0f       	add	r25, r24
 1a4:	96 30       	cpi	r25, 0x06	; 6
 1a6:	28 f4       	brcc	.+10     	; 0x1b2 <HexToInt+0x24>
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c 01       	movw	r18, r24
 1ac:	27 55       	subi	r18, 0x57	; 87
 1ae:	31 09       	sbc	r19, r1
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <HexToInt+0x34>
	else  if (c >= 65 && c <= 70 ) {   num = c - 65 + 10;   }
 1b2:	9f eb       	ldi	r25, 0xBF	; 191
 1b4:	98 0f       	add	r25, r24
 1b6:	96 30       	cpi	r25, 0x06	; 6
 1b8:	20 f4       	brcc	.+8      	; 0x1c2 <HexToInt+0x34>
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	9c 01       	movw	r18, r24
 1be:	27 53       	subi	r18, 0x37	; 55
 1c0:	31 09       	sbc	r19, r1
	return num;
}
 1c2:	c9 01       	movw	r24, r18
 1c4:	08 95       	ret

000001c6 <main>:

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	65 97       	sbiw	r28, 0x15	; 21
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	
	//initialize UART
	uartInit();
 1da:	0e 94 49 00 	call	0x92	; 0x92 <uartInit>
	
	//initialize generator
	generatorInit();
 1de:	0e 94 5a 00 	call	0xb4	; 0xb4 <generatorInit>
	//data variable
	char data;
	//address variable
	int title = 0;
	//data counter
	int count = 0;
 1e2:	e1 2c       	mov	r14, r1
 1e4:	f1 2c       	mov	r15, r1
	//data buffer
	char receive_arr[9];
	//data variable
	char data;
	//address variable
	int title = 0;
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	5e 01       	movw	r10, r28
 1ec:	86 e1       	ldi	r24, 0x16	; 22
 1ee:	a8 0e       	add	r10, r24
 1f0:	b1 1c       	adc	r11, r1
				}
				//space
				uartSendChar(32);
				
				//calculate frequency
				frequency = freq_arr[0] * 100 + freq_arr[1] * 10 + freq_arr[2];
 1f2:	0f 2e       	mov	r0, r31
 1f4:	f4 e6       	ldi	r31, 0x64	; 100
 1f6:	3f 2e       	mov	r3, r31
 1f8:	f0 2d       	mov	r31, r0
 1fa:	6e 01       	movw	r12, r28
 1fc:	e0 e1       	ldi	r30, 0x10	; 16
 1fe:	ce 0e       	add	r12, r30
 200:	d1 1c       	adc	r13, r1
	{
		//waiting for data
		data = uartReceiveChar();
		//if address == 255 //replace q to 255
		if(data == 'q') {
			title = 1;
 202:	55 24       	eor	r5, r5
 204:	53 94       	inc	r5
 206:	41 2c       	mov	r4, r1
 208:	02 c0       	rjmp	.+4      	; 0x20e <main+0x48>
 20a:	05 2d       	mov	r16, r5
 20c:	14 2d       	mov	r17, r4
	int local_sum;
	//loop
	while(1)
	{
		//waiting for data
		data = uartReceiveChar();
 20e:	0e 94 56 00 	call	0xac	; 0xac <uartReceiveChar>
		//if address == 255 //replace q to 255
		if(data == 'q') {
 212:	81 37       	cpi	r24, 0x71	; 113
 214:	d1 f3       	breq	.-12     	; 0x20a <main+0x44>
			title = 1;
		}
		else if(title) {
 216:	01 15       	cp	r16, r1
 218:	11 05       	cpc	r17, r1
 21a:	c9 f3       	breq	.-14     	; 0x20e <main+0x48>
			//saving data to array
			receive_arr[count] = data;
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 0f       	add	r30, r28
 222:	fd 1f       	adc	r31, r29
 224:	ee 0d       	add	r30, r14
 226:	ff 1d       	adc	r31, r15
 228:	80 83       	st	Z, r24
			count++;
 22a:	ff ef       	ldi	r31, 0xFF	; 255
 22c:	ef 1a       	sub	r14, r31
 22e:	ff 0a       	sbc	r15, r31
			//if data count == 9 stop receiving data
			if (count == 9)
 230:	89 e0       	ldi	r24, 0x09	; 9
 232:	e8 16       	cp	r14, r24
 234:	f1 04       	cpc	r15, r1
 236:	59 f7       	brne	.-42     	; 0x20e <main+0x48>
				//reset count and title
				count = 0;
				title = 0;
				
				//generator state (1|0) == (on|off)
				generatorState = HexToInt(receive_arr[0]);
 238:	19 81       	ldd	r17, Y+1	; 0x01
 23a:	81 2f       	mov	r24, r17
 23c:	0e 94 c7 00 	call	0x18e	; 0x18e <HexToInt>
 240:	4c 01       	movw	r8, r24
				uartSendChar(receive_arr[0]);
 242:	81 2f       	mov	r24, r17
 244:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
				//space
				uartSendChar(32);
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
 24e:	7e 01       	movw	r14, r28
 250:	e3 e0       	ldi	r30, 0x03	; 3
 252:	ee 0e       	add	r14, r30
 254:	f1 1c       	adc	r15, r1
 256:	8e 01       	movw	r16, r28
 258:	00 5f       	subi	r16, 0xF0	; 240
 25a:	1f 4f       	sbci	r17, 0xFF	; 255
				
				//getting frequency
				int freq_arr[3];
				for (int i = 2; i < 5; i++)
				{
					freq_arr[i - 2] = HexToInt(receive_arr[i]);
 25c:	f7 01       	movw	r30, r14
 25e:	71 90       	ld	r7, Z+
 260:	7f 01       	movw	r14, r30
 262:	87 2d       	mov	r24, r7
 264:	0e 94 c7 00 	call	0x18e	; 0x18e <HexToInt>
 268:	f8 01       	movw	r30, r16
 26a:	81 93       	st	Z+, r24
 26c:	91 93       	st	Z+, r25
 26e:	8f 01       	movw	r16, r30
					uartSendChar(receive_arr[i]);
 270:	87 2d       	mov	r24, r7
 272:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
				//space
				uartSendChar(32);
				
				//getting frequency
				int freq_arr[3];
				for (int i = 2; i < 5; i++)
 276:	0a 15       	cp	r16, r10
 278:	1b 05       	cpc	r17, r11
 27a:	81 f7       	brne	.-32     	; 0x25c <main+0x96>
				{
					freq_arr[i - 2] = HexToInt(receive_arr[i]);
					uartSendChar(receive_arr[i]);
				}
				//space
				uartSendChar(32);
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
				
				//calculate frequency
				frequency = freq_arr[0] * 100 + freq_arr[1] * 10 + freq_arr[2];
 282:	88 89       	ldd	r24, Y+16	; 0x10
 284:	99 89       	ldd	r25, Y+17	; 0x11
 286:	38 9e       	mul	r3, r24
 288:	30 01       	movw	r6, r0
 28a:	39 9e       	mul	r3, r25
 28c:	70 0c       	add	r7, r0
 28e:	11 24       	eor	r1, r1
 290:	8a 89       	ldd	r24, Y+18	; 0x12
 292:	9b 89       	ldd	r25, Y+19	; 0x13
 294:	ac 01       	movw	r20, r24
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	9c 01       	movw	r18, r24
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	22 0f       	add	r18, r18
 2a2:	33 1f       	adc	r19, r19
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	ca 01       	movw	r24, r20
 2aa:	82 0f       	add	r24, r18
 2ac:	93 1f       	adc	r25, r19
 2ae:	86 0d       	add	r24, r6
 2b0:	97 1d       	adc	r25, r7
 2b2:	6c 88       	ldd	r6, Y+20	; 0x14
 2b4:	7d 88       	ldd	r7, Y+21	; 0x15
 2b6:	68 0e       	add	r6, r24
 2b8:	79 1e       	adc	r7, r25
 2ba:	7e 01       	movw	r14, r28
 2bc:	f7 e0       	ldi	r31, 0x07	; 7
 2be:	ef 0e       	add	r14, r31
 2c0:	f1 1c       	adc	r15, r1
 2c2:	8e 01       	movw	r16, r28
 2c4:	06 5f       	subi	r16, 0xF6	; 246
 2c6:	1f 4f       	sbci	r17, 0xFF	; 255

				//getting control sum
				int sum_arr[3];
				for (int i = 6; i < 9; i++)
				{
					sum_arr[i - 6] = HexToInt(receive_arr[i]);
 2c8:	f7 01       	movw	r30, r14
 2ca:	21 90       	ld	r2, Z+
 2cc:	7f 01       	movw	r14, r30
 2ce:	82 2d       	mov	r24, r2
 2d0:	0e 94 c7 00 	call	0x18e	; 0x18e <HexToInt>
 2d4:	f8 01       	movw	r30, r16
 2d6:	81 93       	st	Z+, r24
 2d8:	91 93       	st	Z+, r25
 2da:	8f 01       	movw	r16, r30
					uartSendChar(receive_arr[i]);
 2dc:	82 2d       	mov	r24, r2
 2de:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
				//calculate frequency
				frequency = freq_arr[0] * 100 + freq_arr[1] * 10 + freq_arr[2];

				//getting control sum
				int sum_arr[3];
				for (int i = 6; i < 9; i++)
 2e2:	0c 15       	cp	r16, r12
 2e4:	1d 05       	cpc	r17, r13
 2e6:	81 f7       	brne	.-32     	; 0x2c8 <main+0x102>
					sum_arr[i - 6] = HexToInt(receive_arr[i]);
					uartSendChar(receive_arr[i]);
				}
				
				//calculate receive control sum
				receive_sum = sum_arr[0] * 100 + sum_arr[1] * 10 + sum_arr[2];
 2e8:	8a 85       	ldd	r24, Y+10	; 0x0a
 2ea:	9b 85       	ldd	r25, Y+11	; 0x0b
 2ec:	38 9e       	mul	r3, r24
 2ee:	80 01       	movw	r16, r0
 2f0:	39 9e       	mul	r3, r25
 2f2:	10 0d       	add	r17, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8c 85       	ldd	r24, Y+12	; 0x0c
 2f8:	9d 85       	ldd	r25, Y+13	; 0x0d
 2fa:	ac 01       	movw	r20, r24
 2fc:	44 0f       	add	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	9c 01       	movw	r18, r24
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	ca 01       	movw	r24, r20
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
 314:	80 0f       	add	r24, r16
 316:	91 1f       	adc	r25, r17
 318:	0e 85       	ldd	r16, Y+14	; 0x0e
 31a:	1f 85       	ldd	r17, Y+15	; 0x0f
 31c:	08 0f       	add	r16, r24
 31e:	19 1f       	adc	r17, r25
				
				uartSendChar(32);
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
				//if local control sum == receive control sum do somthing
				local_sum = frequency + generatorState;
				if (local_sum == receive_sum)
 326:	86 0c       	add	r8, r6
 328:	97 1c       	adc	r9, r7
 32a:	08 15       	cp	r16, r8
 32c:	19 05       	cpc	r17, r9
 32e:	21 f4       	brne	.+8      	; 0x338 <main+0x172>
				{
					uartSendChar('1');
 330:	81 e3       	ldi	r24, 0x31	; 49
 332:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
 336:	03 c0       	rjmp	.+6      	; 0x33e <main+0x178>
				}
				else
				{
					uartSendChar('0');
 338:	80 e3       	ldi	r24, 0x30	; 48
 33a:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
				}

				//new line
				uartSendChar(13);
 33e:	8d e0       	ldi	r24, 0x0D	; 13
 340:	0e 94 52 00 	call	0xa4	; 0xa4 <uartSendChar>
			count++;
			//if data count == 9 stop receiving data
			if (count == 9)
			{
				//reset count and title
				count = 0;
 344:	e1 2c       	mov	r14, r1
 346:	f1 2c       	mov	r15, r1
				title = 0;
 348:	00 e0       	ldi	r16, 0x00	; 0
 34a:	10 e0       	ldi	r17, 0x00	; 0
 34c:	60 cf       	rjmp	.-320    	; 0x20e <main+0x48>

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
